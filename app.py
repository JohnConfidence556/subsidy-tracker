# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o972urnPbHaAlaj-MX-TLkyISTlJO8lR
"""
import streamlit as st
import pandas as pd
import joblib

saved_objects = joblib.load("fraud_detection_pipeline.pkl")

model = saved_objects["model"]
scaler = saved_objects["scaler"]
encoder = saved_objects["encoder"]

# Load the trained model
# model = joblib.load("fraud_detection_pipeline.pkl")

st.title("üí∞ Subsidy Fraud Detection App")
st.write("Evaluate if a subsidy transaction is suspicious or genuine.")

# Sidebar input fields
st.sidebar.header("Input Transaction Details")

age = st.sidebar.number_input("Age", min_value=18, max_value=100, value=30)
gender = st.sidebar.selectbox("Gender", ["Male", "Female"])
income_level = st.sidebar.selectbox("Income Level", ["Low", "Middle", "High"])
household_dependents = st.sidebar.number_input("Household Dependents", min_value=0, max_value=20, value=2)
monthly_energy_consumption_kwh = st.sidebar.number_input("Monthly Energy Consumption (kWh)", min_value=0, value=150)
channel = st.sidebar.selectbox("Channel", ["Mobile Wallet", "Bank Account", "Cash Pickup"])
wallet_activity_status = st.sidebar.selectbox("Wallet Activity Status", ["Active", "Unknown", "Inactive", 'Suspicious'])
days_since_last_transaction = st.sidebar.number_input("Days Since Last Transaction", min_value=0, value=10)

# Convert to DataFrame
input_data = pd.DataFrame({
    "age": [age],
    "gender": [gender],
    "income_level": [income_level],
    "household_dependents": [household_dependents],
    "monthly_energy_consumption_kwh": [monthly_energy_consumption_kwh],
    "channel": [channel],
    "wallet_activity_status": [wallet_activity_status],
    "days_since_last_transaction": [days_since_last_transaction]
})

st.subheader("Input Data")
st.write(input_data)

# Predict
"""
if st.button("Check Transaction"):
    prediction = model.predict(input_data)[0]
    prob = model.predict_proba(input_data)[0][1]  # probability of fraud

    if prediction == 1:
        st.error(f"üö® Suspicious Transaction Detected! (Fraud Probability: {prob:.2f})")
    else:
        st.success(f"‚úÖ Genuine Transaction (Fraud Probability: {prob:.2f})")
"""

if st.button("Check Transaction"):
    # Encode categorical variables
    input_encoded = encoder.transform(input_data[["gender", "income_level", "channel", "wallet_activity_status"]])
    input_encoded_df = pd.DataFrame(input_encoded, columns=encoder.get_feature_names_out())

    # Combine numerical + encoded categorical
    numerical = input_data.drop(columns=["gender", "income_level", "channel", "wallet_activity_status"])
    input_final = pd.concat([numerical.reset_index(drop=True), input_encoded_df.reset_index(drop=True)], axis=1)

    # Scale numeric features
    input_scaled = scaler.transform(input_final)

    # Predict
    prediction = model.predict(input_scaled)[0]
    prob = model.predict_proba(input_scaled)[0][1]

    # Show result
    if prediction == 1:
        st.error(f"‚ö†Ô∏è Fraudulent Transaction Detected! (Probability: {prob:.2f})")
    else:
        st.success(f"‚úÖ Legitimate Transaction (Probability of fraud: {prob:.2f})")
